Plan de Sprints para el desarrollo del juego

Sprint 1: Configuración inicial y estructura básica.

	Objetivo: Crear la estructura del proyecto y las clases base.

	Tareas:
		Configurar el proyecto en el IDE.
		Crear los paquetes (model, enums, game, main).
		Implementar las clases base:
		ShipType (ya implementada).
		Cell (representa una celda del tablero).
		Board (representa el tablero del juego).
		Crear la clase Main con un mensaje inicial para verificar la ejecución.
	Entrega: Proyecto estructurado con las clases base y un programa ejecutable.
			<hr></hr>
		
Sprint 2: Lógica del tablero y colocación de barcos

	Objetivo: Implementar la lógica para manejar el tablero y colocar barcos.

	Tareas:
		Completar la clase Board con métodos para:
		Inicializar el tablero.
		Colocar barcos en posiciones válidas.
		Implementar la clase Ship con atributos como tipo y coordenadas.
		Crear pruebas básicas para verificar la colocación de barcos.
	Entrega: Tablero funcional con lógica de colocación de barcos.
	<hr></hr>

Sprint 3: Gestión de jugadores

	Objetivo: Implementar la clase Player y la interacción básica con el tablero.

	Tareas:
		Crear la clase Player con atributos como nombre y tablero.
		Añadir métodos para que el jugador realice acciones (e.g., disparar).
		Implementar validaciones para los disparos (coordenadas válidas, celdas ya atacadas).
	Entrega: Jugadores funcionales con interacción básica.

Sprint 4: Lógica del juego

	Objetivo: Implementar la clase Game para gestionar el flujo del juego.

	Tareas:
		Crear la clase Game con métodos para:
		Configurar el juego (tableros, jugadores).
		Gestionar turnos.
		Determinar el ganador.
		Integrar la clase Main para iniciar el juego.
	Entrega: Juego funcional con turnos y condiciones de victoria.

Sprint 5: Interfaz de usuario básica

	Objetivo: Mejorar la interacción con el usuario mediante una interfaz de consola.
	Tareas:
		Mostrar el tablero en consola.
		Solicitar y validar entradas del usuario (coordenadas, acciones).
		Añadir mensajes claros para guiar al jugador.
	Entrega: Interfaz de consola funcional y amigable.

Sprint 6: Jugador CPU

	Objetivo: Implementar un jugador CPU con lógica básica.
	Tareas:
		Extender la clase Player para crear un jugador CPU.
		Implementar lógica para que el CPU realice disparos aleatorios.
		Integrar el jugador CPU en la clase Game.
	Entrega: Juego funcional con un jugador humano contra un jugador CPU.

Sprint 7: Mejoras y optimización

	Objetivo: Refinar el juego y corregir errores.
	Tareas:
		Optimizar la lógica del juego y el rendimiento.
		Añadir pruebas unitarias para las clases principales.
		Documentar el código y el proyecto.
	Entrega: Juego optimizado, probado y documentado.

Sprint 8: Funcionalidades avanzadas (opcional)

	Objetivo: Añadir características adicionales.
	Tareas:
		Implementar diferentes niveles de dificultad para el jugador CPU.
		Añadir soporte para guardar y cargar partidas.
		Mejorar la interfaz de usuario (e.g., gráficos en consola).
	Entrega: Juego con funcionalidades avanzadas.
